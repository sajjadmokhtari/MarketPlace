package model

import (
	"time"

	"gorm.io/gorm"
)

// Ø¬Ø¯ÙˆÙ„ Ø´Ù‡Ø±Ù‡Ø§
type City struct {
	gorm.Model
	Name     string    `gorm:"type:varchar(100);not null;unique"`
	Listings []Listing // Ø§Ø±ØªØ¨Ø§Ø· ÛŒÚ© Ø¨Ù‡ Ú†Ù†Ø¯ Ø¨Ø§ Ø¢Ú¯Ù‡ÛŒâ€ŒÙ‡Ø§
}

// Ø¬Ø¯ÙˆÙ„ Ø¯Ø³ØªÙ‡â€ŒØ¨Ù†Ø¯ÛŒâ€ŒÙ‡Ø§
type Category struct {
	gorm.Model
	Name     string    `gorm:"type:varchar(100);not null;unique"`
	Listings []Listing // Ø§Ø±ØªØ¨Ø§Ø· ÛŒÚ© Ø¨Ù‡ Ú†Ù†Ø¯ Ø¨Ø§ Ø¢Ú¯Ù‡ÛŒâ€ŒÙ‡Ø§
}

// Ø¬Ø¯ÙˆÙ„ Ø¢Ú¯Ù‡ÛŒâ€ŒÙ‡Ø§ / Ù„ÛŒØ³ØªÛŒÙ†Ú¯â€ŒÙ‡Ø§
type Listing struct {
	gorm.Model
	Title       string   `gorm:"type:varchar(255);not null" json:"Title"` // Ø¹Ù†ÙˆØ§Ù†
	Description string   `gorm:"type:text" json:"Description"`            // ØªÙˆØ¶ÛŒØ­Ø§Øª
	Price       float64  `gorm:"not null" json:"Price"`                   // Ù‚ÛŒÙ…Øª
	ImagePath   string   `gorm:"type:varchar(255)" json:"ImagePath"`      // Ù…Ø³ÛŒØ± Ø¹Ú©Ø³
	CityID      uint     `gorm:"not null" json:"CityID"`                  // Ø´Ù†Ø§Ø³Ù‡ Ø´Ù‡Ø±
	City        City     `gorm:"foreignKey:CityID" json:"City"`           // Ø§Ø±ØªØ¨Ø§Ø· Ø¨Ø§ Ø¬Ø¯ÙˆÙ„ Ø´Ù‡Ø±
	CategoryID  uint     `gorm:"not null" json:"CategoryID"`              // Ø´Ù†Ø§Ø³Ù‡ Ø¯Ø³ØªÙ‡â€ŒØ¨Ù†Ø¯ÛŒ
	Category    Category `gorm:"foreignKey:CategoryID" json:"Category"`   // Ø§Ø±ØªØ¨Ø§Ø· Ø¨Ø§ Ø¬Ø¯ÙˆÙ„ Ø¯Ø³ØªÙ‡â€ŒØ¨Ù†Ø¯ÛŒ
	Phone       string   `gorm:"type:varchar(20);not null" json:"Phone"`  // Ø´Ù…Ø§Ø±Ù‡ ØªÙ…Ø§Ø³

	UserID uint `gorm:"not null" json:"UserID"`        // ðŸ‘ˆ Ø´Ù†Ø§Ø³Ù‡ Ú©Ø§Ø±Ø¨Ø±
	User   User `gorm:"foreignKey:UserID" json:"User"` // ðŸ‘ˆ Ø§Ø±ØªØ¨Ø§Ø· Ø¨Ø§ Ø¬Ø¯ÙˆÙ„ Ú©Ø§Ø±Ø¨Ø±
}

type MongoListing struct {
	ID          uint    `bson:"id"`
	Title       string  `bson:"title"`
	Price       float64 `bson:"price"`
	Description string  `bson:"description"`
	ImagePath   string  `bson:"image_path"`
	Phone       string  `bson:"phone"`
	City        string  `bson:"city"`
	Category    string  `bson:"category"`
}

type User struct {
	ID        uint   `gorm:"primaryKey"`
	Phone     string `gorm:"uniqueIndex;not null"`
	Role      string `gorm:"default:user"`
	IsBlocked bool   `gorm:"default:false"`
	CreatedAt time.Time
	LastLogin *time.Time

	Listings []Listing `gorm:"foreignKey:UserID"` // ðŸ‘ˆ Ø¢Ú¯Ù‡ÛŒâ€ŒÙ‡Ø§ÛŒ Ù…ØªØ¹Ù„Ù‚ Ø¨Ù‡ Ú©Ø§Ø±Ø¨Ø±
}
